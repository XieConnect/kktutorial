/**
 * === Beginner's Guide to git ===
 * @description This is basically a beginner's guide to git
 * @author Xie, Wei < XieConnect@gmail.com >
 * @license Undecided yet
 * @version 20100111
 */


** everyday git work
  mkdir git_test 先为git建一个文件夹
  cd git_test
  git init  初始化版本库
  echo 'hello git' > hello  建一个文件
  echo 'city' > hangzhou  再建一个文件
  git add hangzhou hello  添加到索引中去 (直接 git add . 也可以)
  git status  可以查看到底有哪些更新
  git rm --cached hello  从索引中“删除”hello (untrack)
  git rm -f hello 直接硬删除文件(force)
  git commit -m 'This is the commit message'
  git commit -a -m 'The message'  加参数a可以省掉烦人的git add步骤

** git全局设置(这一步本来应该放在最开头)
  git config --global user.name 'Xie, Wei'
  git config --global user.email 'bla@bla.com'

* 分支
  git branch my_branch  新建一个分支(必须在有一个commit后才能新建，否则提示not a valid object name)
  git checkout my_branch 把刚建的分支签出准备工作了
  git branch -D my_branch  删除一个

**
  git clone /path/to/new/repo  复制一个远程库。注意：复制命令会自动保存远程的地址，这样下次可以直接pull什么的而不必指明远程地址。
  git config --get remote.origin.url  可以显示远程的地址。也可以用git config -l查看所有的配置项。
  git pull /path/to/changes  把原库中的修改抓回来
  git fetch /path/to/changes  这个与上面的类似，不过他主要是看看远程到底有没有值得pull的修改
  git remote add remote_repo /path/to/remote_repo 这个相当于为后面的远程地址加一个快捷方式。可以这样使用：
  git pull remote_repo

** git faqs
# fatal: remote origin already exists.
git remote rm origin

** The server side
Setting up a git server (Wow! Another GitHub!) on Ubuntu can be very simple.
  # Server side
  sudo apt-get install git-core (install necessary git stuff)
  sudo adduser git (user used for git-ting)

  # Client side
  ssh git@REMOTE_SERVER  (login to your server)
  mkdir example.git  (create a directory to hold your project)
  cd example.git
  git --bare init  (--bare help ommit .git files)

  # Client side again
  mkdir example  (on your LOCAL machine)
  cd example
  git init
  touch README  (sample files)
  git commit -a -m 'first git commit'
  git remote add origin git@REMOTE_SERVER:example.git
  git push origin master

That's all needed for setting up a git server on your Ubuntu box. You will soon check out if the files are truly stored onto the git server machine. Try the following in another new directory:
  git clone git@REMOTE_SERVER:example.git
