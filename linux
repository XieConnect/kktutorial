**
 * === Linux Administration Notes ===
 * @description Linux administration. Refer to README for details
 * @license Undecided yet
 * @author Wei Xie < XieConnect (at) gmail.com >
 */

# install java
 sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
 sudo apt-get update
 sudo apt-get install sun-java6-jdk

## gpg on Linux (package: gnupg)
 gpg --gen-key
 follow the instructions and finish generating the key
 gpg --list-keys    #will list all keys(keyID will be the number after the slash /)
	gpg --armor --output mykey.asc --export bla@bla.com  #export keys
	gpg --import outerkey.asc
	gpg --keyserver pgp.mit.edu --send-key 12345  ##upload you key to public server. 12345 is the keyID
	gpg --keyserver pgp.mit.edu --search-keys bla@bla.com  ##search for public keys

	now we will test encryption with sample.log file
	gpg -ea -r 12345 sample.log  #12345 is keyID and the generated file would be sample.log.asc
	now comes to decryption
	gpg -o sample_output.log -d sample.log.asc  #sample_output.log is the file you want

	there is a very excellent Chinese article talking about gpg at: http://www.online990.com/htm/2009728/50.htm

## Ruby on Rails install guide
 required packages: build-essential libopenssl-ruby ruby rubygems ruby1.8-dev  libsqlite3-dev
 then install the following with gem:
 rails sqlite3-ruby
 and set up env: add to ~/.bashrc
 export PATH=/var/lib/gems/1.8/bin:$PATH

## remote desktop (connect to Windows from Linux)
rdesktop -a 16 172.29.142.19
available options:
-f  full screen
-a  display color of remote machine

## ebook in VIM
first convert file from utf-8 to gbk
then set proper line ending (fileformat)
:set fileenconding=gbk
:set ff=dos

## error running ruby on rails server
- Error: libssl.so.0.9.8: cannot open shared object file: No such file or directory
openssl.so

- Solution:
install openssl-compatibility via yaourt

## lock screen in console: vlock

## converting encoding
enca is a more effective converting tool than iconv
enca -L 当前语言 -x 目标编码 文件名
eg. enca -L zh_CN -x gbk *  #当前目录下所有文件转为gbk

附上iconv的用法：
iconv -f gb18030 -t utf-8 file1.txt > file2.txt

VIM can help accomplish the same task:
(in VIM command mode) :set fileenconding=gbk
check out the result by execute :set fileenconding


## modify password in mysql
mysqladmin -u root PASSWORD 'your_password'  # root为用户名，PASSWORD为命令

## Ruby on Rails
if you have previously installed ruby-1.9, please delete it by:
  pacman -R ruby
then we'll install ruby1.8 :
  yaourt -S ruby1.8
  yaourt -S rubygems1.8
  pacman -S mysql
  gem install mysql
  pacman -S sqlite3
  gem install sqlite3-ruby --with-sqlite3-include=/usr/include --with-sqlite3-lib=/usr/lib


## show correct local time
reset the system time based on current timezone
hwclock --systz

## git completion
save the following file as ~/.git-completion.bash:
http://repo.or.cz/w/git.git/blob_plain/HEAD:/contrib/completion/git-completion.bash

and then add the following into .bashrc:
source ~/.git-completion.bash

## how to do auto-mount in pcmanfm
add the following to /etc/dbus-1/system.d/hal.conf :

<policy group="power">
   <allow send_interface="org.freedesktop.Hal.Device.SystemPowerManagement"/>
   <allow send_interface="org.freedesktop.Hal.Device.LaptopPanel"/>
 </policy>

 <policy group="storage">
   <allow send_interface="org.freedesktop.Hal.Device.Volume"/>
   <allow send_interface="org.freedesktop.Hal.Device.Volume.Crypto"/>
 </policy>

and then restart hal and pcmanfm

## update grub2
edit /etc/default/grub
afterward, run command update-grub to auto update /boot/grub/grub.cfg

## 打包命令
tar cvzf backup.tar.gz ~/music  (注意先写目标名，再写待打包的目录)

## ls 以MB为单位
ls -h ~/music  (显示时无单位的是byte，有Ｋ的是KB，有M是MB )

##openbox tips
configuration is at /etc/xdg/openbox  (menu.xml for menus, rc.xml for keyboard bindings, autostart.sh for programs)
一般把上面的配置文件复制到~/.config/openbox/中去，防止升级时被覆盖

## logout and reboot in openbox

logout: killall openbox
reboot: sudo reboot
shutdown: sudo poweroff

Refer to my self-maintained script in /usr/bin/kshutdown for a graphical selector(zenity must be installed)

## useful tips
(实现对当前目录文件列表的共享访问。8080是自定义商品，默认为8000:)
python -m SimpleHTTPServer 8080  


# switch terminals
Ctrl+Alt+F5等, 加F7为桌面

## volumn control in openbox
gnome-volumn-control  (be sure to uncheck the Mute checkbox)
alsamixer  (won't work under my openbox)

## set gvim window size
add the following to /etc/vim/vimrc  :
set lines=70 columns=110


## Rails on Ubuntu
sudo apt-get install build-essential  (install necessary tools for building)
sudo apt-get install ruby rubygems ruby1.8-dev libsqlite3-dev
sudo gem sources -a "http://gemcutter.org"  (gemcutter is a faster gem hosting than rubyforge)
sudo gem install rails -v 2.3.4

(add /var/lib/gems/1.8/bin to your PATH environment variable:)
export PATH=$HOME/bin:/var/lib/gems/1.8/bin:$PATH
then you should install databases like mysql.

Here is a list of tools that might be needed when installing Rails:
sudo apt-get install ruby ri rdoc mysql-server libmysql-ruby ruby1.8-dev irb1.8 libdbd-mysql-perl libdbi-perl libmysql-ruby1.8 libmysqlclient15off libnet-daemon-perl libplrpc-perl libreadline-ruby1.8 libruby1.8 mysql-client-5.1 mysql-common mysql-server-5.1 rdoc1.8 ri1.8 ruby1.8 irb libopenssl-ruby libopenssl-ruby1.8 libhtml-template-perl mysql-server-core-5.1 libmysqlclient16 libreadline5 psmisc

## generating ssh keys
ssh-keygen -t rsa -C "XXX@xxx.com"
and then follow the prompt
~/.ssh/id_rsa.pub  (location of your key)

## If you see this warning it means we have a little more work to do.

perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
 LANGUAGE = (unset),
 LC_ALL = (unset),
 LANG = "en_US.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").


Let's go ahead and set your locale now. (I'm using en-US in this example.. feel free to substitute for your region)

sudo locale-gen en_US.UTF-8
sudo /usr/sbin/update-locale LANG=en_US.UTF-8

## Modify SSH welcome message
/etc/motd  (内容在该文件中，不过似乎改此处无用，该文件好像是每次由系统自动生成)
/etc/motd.tail  （这里是提示消息的尾巴，改动这里是可以有显示的）
注意：在Ubuntu Server中改动上面两个都没有用，因为所有消息都是登录时实时生成的。

另有一个小工具figlet，可以根据给定字体生成由ASCII码组成的大型提示消息
figlet mymessage -cf big (c表示居中显示，f用于指定字体，big和standard不错，还有个banner也不错)

## Ubuntu 9.10安装网络电视(SopCast Player)
sudo add-apt-repository ppa:jason-scheunemann/ppa  (先加额外源)
sudo apt-get update
wget http://sopcast-player.googlecode.com/~~~  (需要先下载sp-auth deb包)
sudo dpkg -i sp-auth~~~.deb  安装sp-auth
注意，上两步后也可以同时把sopcast-player下下来安装。或者如下安装也可；
sudo apt-get install sopcast-player

总结：加了一个第三方的库少了N多麻烦。不然的话直接安装sp-auth和sopcast-player会有一系列的依赖错误（vlc, libstdc++5, ia32-libs等）

另外，有好几个用类似的项目，比较好的有：gmlive和qsopcast

## 几个很实用的命令
apropos pdf  (找出与pdf相关的软件)
pgrep -lu myuser firefox (列出用户myuser的所有叫firefox的进程号)



## iBus不稳定
ps aux | grep ibus  找出所有iBus进程
kill -9 xxxx yyyy  杀掉相关进程
ibus-daemon &  再启动ibus即可

## 转换编码
iconv -f gbk -t utf8 in_file > out_file

## copy directory
The following will act like "mv test_dev test" but without deleting the original test_dev :
cp test_dev/* test


i am really stupid


## vim notes
ESC = Ctrl + [

# Origin: http://oss.lzu.edu.cn/modules/newbb/viewtopic.php?topic_id=1971&forum=6

读本文之前请注意：
1. 本文的目标是提供一些vim的使用技巧，利用这些技巧可以提高vim的操作效率。部分技巧在vi上也可以使用，但是现在基本上都是用vim了。
2. 本文是整理和总结使用技巧，而非讲解vim入门，因此不会涉及最基本的使用，例如如何上移或下移光标，对此类操作请参阅任何一本vim或者vi教程。
3. 本文阅读对象是了解了vim的基本操作，而希望高效地利用vim进行工作的人。熟练使用vim的人自然不必细读，如果能留下您的宝贵意见，本人将感激不尽。
4. 本文由本人搜集整理，转载请注明出处

本文一般情况下用（里边的字母一般大小写无所谓,除非特别注明）表示按住ctrl同时按下相关字母，命令前加一个i表示在插入模式下用这个命令

1. 选定文字 / 拷贝粘贴

v为可视模式,可以选定多行。选定多行之后，可以用yy或者dd等等进行拷贝和剪切。
p 是粘贴
y 和d 可以直接拷贝或者剪切选定的内容
yw是拷贝一个单词
如果要复制整行的最简单办法就是V,y,p 就行了
v是可以选定一行任意个字符的,V是行选定的,一次一整行，然后通过向下或向上移动光标而选定多行。
对于v选定的,拷贝后就是这么多,选多少就拷贝多少,而V选定的,粘贴的话会自动换到下一行
命令模式下,也是块选定,不过是列块选定

2. 折叠代码

可以zf进行折叠, 用zo打开折叠,也可以方向键向右打开折叠,zc 关闭折叠(只要在被折叠的块中的任一个语句就行)

3. 缩进代码

是右缩进
按v选定后按=就是自动格式化代码,自动缩进,内部的递归的缩进都做到了
行左移>，该命令用于调整源码缩进格式简便快速。

4. 移动光标

%是从大括号的开始移动到大括号的结束位置
:后边加行号就是跳到这一行
光标返回到以前的位置。相当于光标移动的“撤销”
光标返回到后来的位置。相当于光标移动的“恢复”

5. 多文件编辑 / 缓冲区命令

vim下每一个打开的文件对应一个缓冲区（buffer）。
多文件编辑会有两种情形，一种是在进入 vim 前所用的参数就是多个文件（这种情形称为 argument list）。另一种情形是进入 vim 后另外再开其它的文件（称为 buffer list）。不过都可以统称为buffer。

5.1 打开文件
vi flname1 flname2… flnameN
将多个文件调入缓冲，是 argument list。
:e filename
这是在进入 vim 后，在不离开 vim 的情形下再开其它文件，只要您要编辑的档案是在目前目录，Tab 补全键还是可以使用。是buffer list。
注意：:e 或者:new 或者:split 后边可以跟目录,这样就可以在目录下慢慢找要打开的文件了

5.2 缓冲区跳转
:n 编辑下一个文件。
:2n 编辑下二个文件。
:N 编辑前一个文件。注意，这种用法只能用于 argument list 的情形。
:rew 回到首文件
:args 查看当前编辑缓冲文件状态
:e# 或 Ctrl-^ 编辑前一个档案，用于两文件互相编辑时相当好用。这种用法不管是 argument list 或buffer list 档案间皆可使用。 使用Ctrl－^ 命令更便捷，但如终端类型不正确该功能将无效。
用:ls来显示缓冲区中的文件，编号后边有#的代表是前一个文件，可以通过:e#来进入，有%a的代表是当前文件，什么也没有的可以通过:bn来进入，这里的n代表文件编号。
:b文件名或编号 移至该文件。
在 :ls 中就会出示各文件的编号，这个编号在未离开 vim 前是不会变的。这个指令 elvis 也是可以使用。当然 :e#编号 也是可以的，这样的用法则是所有 vi clone 都通用了。
在 buffers 中，减号 - 表示这个 buffer 并未载入，不过，不必担心，载入相当快速的。加号 + 表示这个 buffer 已经修改过了。
:bn buffer next。这里的n代表字母n
:bl buffer last。
以上两个指令 elvis 不适用。
如果您是使用 vim 的 GUI，那就在菜单上就会有 Buffers 这个选项，可以很容易的知道及移动各buffer 间。

5.3 移除缓冲区
:bd(elete) buffer 在未离开 vim 前是不会移除的，可使用这个指令移除。其实移除它干什么呢？vim是您在叫用时才会载入的，因此这些 buffers 并不是像 cache 一般要占内存的。

5.4 重新编辑
放弃一修改过的文件，重新编辑。
(1)使用命令　:q!强行退出后再vi flname重新进入。
(2)使用命令　:e!强行重编辑更便捷。这样也是会打开文件，但会放弃目前编辑文件的改变，否则如果文件已有变动，vim 预设是不让您随便离开的。:e! 后不接什么的话，代表舍弃一切修改，重新载入编辑中文件。

5.5 其他命令
:files 或 :buffers 或 :ls 会列出目前 buffer 中的所有文件。
在 elvis 中可使用 :b 来叫出 buffers。
:f 或 Ctrl-g 显示目前编辑的文件名、是否经过修改及目前光标所在之位置。
:f 文件名 改变编辑中的文件名。(file)
:r 文件名 在光标所在处插入一个文件的内容。(read)
:35 r 文件名 将文件插入至 35 行之后。
gf 这是 vim 的特殊打开文件的方法，会打开光标所在处的 word 为名的文件，当然，这个文件要在当前目录内，否则会创建新文件。

6. 查找命令

用/查找单词后,n可以跳到下一个,N则是上一个,:nohls可以取消高亮
查找时,:set ignorecase”项让VIM忽略大小写，“:set noignorecase” 来关闭这项功能。

7. 修改文字

cw:删除一个单词并进入插入模式,cc:删除一行并进入插入模式。
r:然后输入的字母将替换当前字母并保持命令模式,R则是不停的替换(一个挨着一个)。
0到行首,$到行尾。

8. 函数间跳转

ctrl+]和ctrl+T分别是查找函数的定义和返回,好像需要ctag的支持
i 跳转到光标所指标识符的定义行,是打开一个新的小窗口显示,记住要加个i,最好是找自己项目下的文件,否则找库函数的话还不如man.
大写 K 看光标所指标识符的 man 帮助页

9. 窗口命令

= ctrl+w
:split 文件名 同时在一个页面显示多个文件的内容,类似多窗口,用切换当前窗口
f 切分显示光标在处的文件名，VIM 会在 path 中搜索该文件名，比如常用它打开 #include 语句中的文件
_ 当同时打开几个文件时，按 _ 使当前窗口最大化
用Ctrl-W命令指定光标移动：
Ctrl-W + 扩大窗口
Ctrl-W - 缩小窗口
Ctrl-W h 移动到窗口左边
Ctrl-W j 移动到窗口下边
Ctrl-W k 移动到窗口上边
Ctrl-W l 移动到窗口右边
等于是按下后,松开键盘,再按下一个命令就可以了.
如果要关闭分割窗口可以用:close，剩下只有一个窗口的话就不能关了。
多窗口是split，像用e打开多个文件是将文件放在缓冲区中。

10. 自动完成

i 向上搜索，补全一个词
i 向下搜索，补全一个词
i 补全一行。
比如你写过一行 for (int i = 0; i 即可。如果补全出来的不是你想要的那一行，你可以按 或
选择上一个或下一个匹配行i 在文件系统中搜索，补全一个文件名
如果按 或 补全一个词，在当前文件中没有找到匹配，VIM 将搜索 #include 语句中的文件，而文件的位置将在 path 中搜索。
i 把上一行对应列的字符抄下来
i 把下一行对应列的字符抄上来,这两个都可以一直按下去,到了行尾自己会停的.

11. 注释整块内容

注释块的方法:
选定要注释掉的行 I // Esc
I之后输入的东西就是插入到选定的行前边的,直至Esc.
要去掉注释的办法:选定注释符//,然后d
列块选定后I是在前边都插入,A是在后边都插入
是按列块模式的选定,是行选定,v是普通选定

12. 其他命令

u可以撤销上一步操作, ctrl+r可以恢复
i命令执行一个普通模式的命令，执行完毕后回到插入模式，不用多次Esc
i后续字符 输入特殊的 ASCII 字符或键。
. 在光标当前位置处重复上一次操作
:!命令行 执行一条外部命令
***********************************************************************************
我是 vim 粉丝, 用了许久, 有一些自己的感受, 又到处挖到一些别人的技巧. 感觉对 vim 粉丝比较有用, 就把它记在这儿. 希望借此文套出大家自己的巧活, 就正应了抛砖引玉的古话了.
先稍为介绍一下 vim. vi 是 unix/linux 下极为普遍的一种文本编辑器, 大部分机器上都有. vi 有各种变种,
在不同的机器上常用不同的变种软件. 其中 vim 比较好用也用得比较广泛. vim 是 Vi IMproved 的缩写, 表示更好的 vi.
我个人觉得它是非常好的编辑器(为了避免 Emacs 粉丝挑眼, 就不说最好了). 没用过的也建议试试看, 当然 vim
对编写文本文件很方便好用, 比如编写程序, html文档等等, 却不能用来编写 word 文档.
关于 vim 的安装, 基本使用方法等网络上能搜出许多, 就不在这里罗嗦了, 要是对 vim 有兴趣, 那就看看这里(中文文档):
http://vcd.gro.clinux.org/
本文就说些其中比较有用, 比较常用的命令, 若能熟练运用这些命令, 那么会发现编辑文件很舒服.
说明:
以下的例子中 xxx 表示在命令模式下输入 xxx 并回车
以下的例子中 :xxx 表示在扩展模式下输入 xxx 并回车
小括号中的命令表示相关命令.
在编辑模式或可视模式下输入的命令会另外注明.
1. 查找
/xxx(?xxx) 表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示
向上查找.其中xxx可以是正规表达式,关于正规式就不多说了.
一般来说是区分大小写的, 要想不区分大小写, 那得先输入
:set ignorecase
查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.
*(#) 当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的
下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方
向查找.
g*(g#) 此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而
是匹配包含该单词的所有字符串.
gd 本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非
注释段中第一次出现这个单词的地方.
% 本命令查找与光标所在处相匹配的反括号, 包括 () [] {}
f(F)x 本命令表示在光标所在行进行查找, 查找光标右(左)方第一个x字符.
找到后:
输入 ; 表示继续往下找
输入 , 表示反方向查找
2. 快速移动光标
在 vi 中, 移动光标和编辑是两件事, 正因为区分开来, 所以可以很方便的进行光标定
位和编辑. 因此能更快一点移动光标是很有用的.
w(e) 移动光标到下一个单词.
b 移动光标到上一个单词.
0 移动光标到本行最开头.
^ 移动光标到本行最开头的字符处.
$ 移动光标到本行结尾处.
H 移动光标到屏幕的首行.
M 移动光标到屏幕的中间一行.
L 移动光标到屏幕的尾行.
gg 移动光标到文档首行.
G 移动光标到文档尾行.
c-f (即 ctrl 键与 f 键一同按下) 本命令即 page down.
c-b (即 ctrl 键与 b 键一同按下, 后同) 本命令即 page up.
'' 此命令相当有用, 它移动光标到上一个标记处, 比如用 gd, * 等查
找到某个单词后, 再输入此命令则回到上次停留的位置.
'. 此命令相当好使, 它移动光标到上一次的修改行.
`. 此命令相当强大, 它移动光标到上一次的修改点.
3. 拷贝, 删除与粘贴
在 vi 中 y 表示拷贝, d 表示删除, p 表示粘贴. 其中拷贝与删除是与光标移动命令
结合的, 看几个例子就能够明白了.
yw 表示拷贝从当前光标到光标所在单词结尾的内容.
dw 表示删除从当前光标到光标所在单词结尾的内容.
y0 表示拷贝从当前光标到光标所在行首的内容.
d0 表示删除从当前光标到光标所在行首的内容.
y$ 表示拷贝从当前光标到光标所在行尾的内容.
d$ 表示删除从当前光标到光标所在行尾的内容.
yfa 表示拷贝从当前光标到光标后面的第一个a字符之间的内容.
dfa 表示删除从当前光标到光标后面的第一个a字符之间的内容.
特殊地:
yy 表示拷贝光标所在行.
dd 表示删除光标所在行.
D 表示删除从当前光标到光标所在行尾的内容.
关于拷贝, 删除和粘贴的复杂用法与寄存器有关, 可以自行查询.
4. 数字与命令
在 vi 中数字与命令结合往往表示重复进行此命令, 若在扩展模式的开头出现则表示行
号定位. 如:
5fx 表示查找光标后第 5 个 x 字符.
5w(e) 移动光标到下五个单词.
5yy 表示拷贝光标以下 5 行.
5dd 表示删除光标以下 5 行.
y2fa 表示拷贝从当前光标到光标后面的第二个a字符之间的内容.
:12,24y 表示拷贝第12行到第24行之间的内容.
:12,y 表示拷贝第12行到光标所在行之间的内容.
:,24y 表示拷贝光标所在行到第24行之间的内容. 删除类似.
5. 快速输入字符
在 vi 中, 不要求你输入每一个字符, 可以有很多种方法快速输入一些字符.
使用 linux/unix 的同学一定有一个经验, 在命令行下输入命令时敲入头几个字符再按
TAB 系统就会自动将剩下的字符补齐, 假如有多个匹配则会打印出来. 这就是著名的命令
补齐(其实windows中也有文件名补齐功能). vi 中有许多的字符串补齐命令, 非常方便.
c-p(c-n) 在编辑模式中, 输入几个字符后再输入此命令则 vi 开始向上(下)搜
索开头与其匹配的单词并补齐, 不断输入此命令则循环查找. 此命令
会在所有在这个 vim 程序中打开的文件中进行匹配.
c-x-l 在编辑模式中, 此命令快速补齐整行内容, 但是仅在本窗口中出现的
文档中进行匹配.
c-x-f 在编辑模式中, 这个命令表示补齐文件名. 如输入:
/usr/local/tom 后再输入此命令则它会自动匹配出:
/usr/local/tomcat/
abbr 即缩写. 这是一个宏操作, 可以在编辑模式中用一个缩写代替另一个
字符串. 比如编写java文件的常常输入 System.out.println, 这很
是麻烦, 所以应该用缩写来减少敲字. 可以这么做:
:abbr sprt System.out.println
以后在输入sprt后再输入其他非字母符号, 它就会自动扩展为System.
out.println
6. 替换
替换是 vi 的强项, 因为可以用正规表达式来匹配字符串.以下提供几个例子.
:s/aa/bb/g 将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb
:s/\/bb/g 将光标所在行出现的所有 aa 替换为 bb, 仅替换 aa 这个单词
:%s/aa/bb/g 将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb
:12,23s/aa/bb/g 将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb
:12,23s/^/#/ 将从12行到23行的行首加入 # 字符
:%s= *$== 将所有行尾多余的空格删除
:g/^\s*$/d 将所有不包含字符(空格也不包含)的空行删除.
7. 多文件编辑
在一个 vim 程序中打开很多文件进行编辑是挺方便的.
:sp(:vsp) 文件名 vim 将分割出一个横(纵)向窗口, 并在该窗口中打开新文件.
从 vim6.0 开始, 文件名可以是一个目录的名称, 这样, vim 会
把该目录打开并显示文件列表, 在文件名上按回车则在本窗口打
开该文件, 若输入 O 则在新窗口中打开该文件, 输入 ? 可以看
到帮助信息.
:e 文件名 vim 将在原窗口中打开新的文件, 若旧文件编辑过, 会要求保存.
c-w-w vim 分割了好几个窗口怎么办? 输入此命令可以将光标循环定位
到各个窗口之中.
:ls 此命令查看本 vim 程序已经打开了多少个文件, 在屏幕的最下方
会显示出如下数据:
1 %a "usevim.html" 行 162
2 # "xxxxxx.html" 行 0
其中:
1 表示打开的文件序号, 这个序号很有用处.
%a 表示文件代号, % 表示当前编辑的文件,
# 表示上次编辑的文件
"usevim.html" 表示文件名.
行 162 表示光标位置.
:b 序号(代号) 此命令将指定序号(代号)的文件在本窗口打开, 其中的序号(代号)
就是用 :ls 命令看到的.
:set diff 此命令用于比较两个文件, 可以用
:vsp filename
命令打开另一个文件, 然后在每个文件窗口中输入此命令,就能看
到效果了.
8. 宏替换
vi 不仅可以用 abbr 来替换文字, 也可以进行命令的宏定义. 有些命令输起来很费劲,
因此我把它们定义到 - 上, 这样就很方便了.这些配置可以预先写到 ~/.vimrc
(windows 下为 $VIM/_vimrc) 中, 写进去的时候不用写前面的冒号.
:nmap :nohls 取消被搜索字串的高亮
:nmap w 命令模式下转移光标到不同窗口
:imap 输入模式下运行
:nmap :%s= *$== 删除所有行尾多余的空格.
:imap 同上
:java 中: (注, 这里为什么说 java 中, 因为以下定义对其他文件格式不起作用, 下文
会说到如何实现这一点)
:nmap :comp javac:mak -d . %
此命令用 javac 编译 java 文件, 它会自动将光标定位到出错点. 不过这需要定
义一个 javac.vim 文件在 $VIM/compiler 下, 在 javac.vim 里面只有两行字:
setlocal makeprg=javac
setlocal errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%#
:nmap :comp ant:mak
此命令用 ant 编译 java 文件, 它会自动将光标定位到出错点. 一般来说, 安装
vim 后已经有了compiler/ant.vim文件, 因此这个命令可以直接使用. 但是需要
在当前目录下有 build.xml 文件, 当然还必须安装 ant 才行.
:nmap :cl 此命令用于查看所有的编译错误.
:imap 
:nmap :cc 此命令用于查看当前的编译错误.
:imap 
:nmap :cn 此命令用于跳到下一个出错位置.
:imap 
:nmap :cp 此命令用于跳到上一个出错位置.
:imap 
:nmap :JavaBrowser
此命令用于在窗口左部分割出一个新窗口, 里面的内容是 java 的资源树, 包括
本文件中出现的类, 类的成员变量及成员方法, 就好像 JCreator 表现的那样.
在这个窗口中输入 ? 会看到帮助. 嘿嘿, 很好用, 不过需要 ctags 支持.
:imap 
9. TAB
TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.
> 输入此命令则光标所在行向右移动一个 tab.
5>> 输入此命令则光标后 5 行向右移动一个 tab.
:12,24> 此命令将12行到14行的数据都向右移动一个 tab.
:12,24>> 此命令将12行到14行的数据都向右移动两个 tab.
那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.
有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能
帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.
:set shiftwidth=4 设置自动缩进 4 个空格, 当然要设自动缩进先.
:set sts=4 即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.
:set tabstop=4 实际的 tab 即为 4 个空格, 而不是缺省的 8 个.
:set expandtab 在输入 tab 后, vim 用恰当的空格来填充这个 tab.
10. autocmd
这个命令十分的强大, 可以用这个命令实现对不同的文件格式应用不同的配置; 可以
在新建文件时自动添加上版权声明等等. 这些命令一般定义在 ~/.vimrc 这样的配置文件
里面. 由于他很强大, 所以我不能给出很具体的说明, 只能举几个例子, 详细的请看帮助.
:autocmd! 删除所有之前的自动命令.
autocmd FileType java source ~/.vim/files/java.vim
autocmd FileType java source ~/.vim/files/jcommenter.vim
以上两条命令让我在打开 java 文件时才应用后面提到的两个配置文件.
autocmd BufNewFile *.java 0r ~/.vim/files/skeletons/java.skel
以上这条命令让我在新建 java 文件时自动加入 java.skel 文件的内容.
autocmd BufNewFile *.java normal gnp
以上这条命令让我在新建 java 文件时自动运行 gnp 命令, 这个命令进行一些特殊化
处理, 比如将新 java 文件中的 __date__ 替换成今天的日期什么的.
11. 常用脚本
在 vim.sf.net 你可以发现很多脚本(script), 这些脚本常常有让你意想不到的作用.
我常用的有:
jcommenter.vim 自动加入 javadoc 风格的注释.
JBrowser.vim 类资源浏览. C, C++ 等可以用 Tlist
还有许多有用的, 比如 checkstyle.vim 可以检验你的编程风格, jad.vim 可以直接
反编译 .class 文件等等.
12. 常用配置
在~/.vimrc 配置文件中你常常需要一些个性化配置. 比如上面写的一些宏定义, 一些
autocmd 定义等等. 比如:
set suffixes=.bak,~,.o,.h,.info,.swp,.aux,.bbl,.blg,.dvi,.lof,.log,.lot,.ps,.toc
这样在vim中打开文件时, 按 tab 键补齐文件名时它会忽略上述文件.
set nu 显示行号
set ai 设置自动缩进
map Y y$ 让 Y 和 D 一样, 要不然 Y 的本意和 yy 一样.
13. 其他
还有许多有意思的命令, 记录在这里免得忘记.
. 重复上次编辑命令.
:g/^/exec "s/^/".strpart(line(".")." ", 0, 4) 在行首插入行号
:runtime! syntax/2html.vim 转换 txt 成 html, 会按照你的颜色配置来转

本文来自ChinaUnix博客，如果查看原文请点：http://blog.chinaunix.net/u3/94705/showart_1985855.html



# lshw  查看硬件信息（非常详细 -short 短点的信息）
  sysstat
  uname -a  体系结构内核版本
  /proc/cpuinfo
  /proc/meminfo

# 截屏
import my_screenshot.jpg  输入后会有鼠标选择范围
sleep 5; import my_screenshot.jpg  先暂停5妙
import -frame my_screenshot.jpg  截窗口
import -window root my_screenshot.jpg  全屏

Besides, gimp also offers the functionality of printing screenshot

# 对已经打开的两文件diff
:windo difft

## upgrade rubygems in Ubuntu
sudo gem install update_rubygems
sudo /var/lib/gems/1.8/bin/update_rubygems
gem -v

## set up Integrity on Heroku
git clone git://github.com/sr/integrity-heroku
cd integrity-heroku
heroku create
git push heroku master
heroku rake db
heroku open

## rename, delete file with NERDTree in VIM
enter m on a file node in NERDTree and choose appropriate choices:
m: move (and rename as well)
d: delete

## ssh with keys
copy local public key to remote server:
scp ~/.ssh/id_rsa.pub username@remotehost:~/.ssh/authorized_keys

## cucumber feature test
All features test should not have direct model access (internal logic). Instead they should test integration

For buttons: click_button('Create')  or
When I press "Create"  (which is covered by webrat)

For page and links:
When I go to the homepage
And I follow "New Agenda"
And I fill in "name" with "Dodo"
And I press "Submit"
Then I should see "Thank you"

## spec tips
Keep the scope of testing as small as possible to test in isolation

## disable list directory in Apache on Ubuntu
The funny thing is that, editing neither /etc/apache2/httpd.conf nor ***/apache2.conf will help. I customized the conf for certain websites and it works (edit ***/site-enabled/***).
Add the following under the <Directory> section (the '-' means 'remove'):

Options -Indexes

## do not show nVidia logo at system startu
First backup the xorg.conf:
sudo cp /etc/X11/xorg.conf /etc/X11/xorg.conf_backup
Then search for:
Section "Device"
Driver "nvidia"

Add the following inside the Section block:
Option "NoLogo"

## get chrome to display Chinese characters more clearly
edit file: ~/.config/google-chrome/Default/Preferences  # or may be chromium instead of google-chrome
search for the "webkit" section and add the following:
"minimum_font_size": 16,
"minimum_logical_font_size": 16

And then set your default font as the followng:
serif 16
serif 16
Monospace 13
